/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef QUERY_EXECUTOR_H
#define QUERY_EXECUTOR_H

#include <thrift/c_glib/processor/thrift_dispatch_processor.h>

#include "protocol_types.h"

/* QueryExecutor service interface */
typedef struct _QueryExecutorIf QueryExecutorIf;  /* dummy object */

struct _QueryExecutorIfInterface
{
  GTypeInterface parent;

  gboolean (*execute) (QueryExecutorIf *iface, ProtocolQueryResult ** _return, const ProtocolQuery * query, GError **error);
};
typedef struct _QueryExecutorIfInterface QueryExecutorIfInterface;

GType query_executor_if_get_type (void);
#define TYPE_QUERY_EXECUTOR_IF (query_executor_if_get_type())
#define QUERY_EXECUTOR_IF(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_QUERY_EXECUTOR_IF, QueryExecutorIf))
#define IS_QUERY_EXECUTOR_IF(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_QUERY_EXECUTOR_IF))
#define QUERY_EXECUTOR_IF_GET_INTERFACE(inst) (G_TYPE_INSTANCE_GET_INTERFACE ((inst), TYPE_QUERY_EXECUTOR_IF, QueryExecutorIfInterface))

gboolean query_executor_if_execute (QueryExecutorIf *iface, ProtocolQueryResult ** _return, const ProtocolQuery * query, GError **error);

/* QueryExecutor service client */
struct _QueryExecutorClient
{
  GObject parent;

  ThriftProtocol *input_protocol;
  ThriftProtocol *output_protocol;
};
typedef struct _QueryExecutorClient QueryExecutorClient;

struct _QueryExecutorClientClass
{
  GObjectClass parent;
};
typedef struct _QueryExecutorClientClass QueryExecutorClientClass;

GType query_executor_client_get_type (void);
#define TYPE_QUERY_EXECUTOR_CLIENT (query_executor_client_get_type())
#define QUERY_EXECUTOR_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_QUERY_EXECUTOR_CLIENT, QueryExecutorClient))
#define QUERY_EXECUTOR_CLIENT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), TYPE_QUERY_EXECUTOR_CLIENT, QueryExecutorClientClass))
#define QUERY_EXECUTOR_IS_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_QUERY_EXECUTOR_CLIENT))
#define QUERY_EXECUTOR_IS_CLIENT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_QUERY_EXECUTOR_CLIENT))
#define QUERY_EXECUTOR_CLIENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_QUERY_EXECUTOR_CLIENT, QueryExecutorClientClass))

gboolean query_executor_client_execute (QueryExecutorIf * iface, ProtocolQueryResult ** _return, const ProtocolQuery * query, GError ** error);
gboolean query_executor_client_send_execute (QueryExecutorIf * iface, const ProtocolQuery * query, GError ** error);
gboolean query_executor_client_recv_execute (QueryExecutorIf * iface, ProtocolQueryResult ** _return, GError ** error);
void query_executor_client_set_property (GObject *object, guint property_id, const GValue *value, GParamSpec *pspec);
void query_executor_client_get_property (GObject *object, guint property_id, GValue *value, GParamSpec *pspec);

/* QueryExecutor handler (abstract base class) */
struct _QueryExecutorHandler
{
  GObject parent;
};
typedef struct _QueryExecutorHandler QueryExecutorHandler;

struct _QueryExecutorHandlerClass
{
  GObjectClass parent;

  gboolean (*execute) (QueryExecutorIf *iface, ProtocolQueryResult ** _return, const ProtocolQuery * query, GError **error);
};
typedef struct _QueryExecutorHandlerClass QueryExecutorHandlerClass;

GType query_executor_handler_get_type (void);
#define TYPE_QUERY_EXECUTOR_HANDLER (query_executor_handler_get_type())
#define QUERY_EXECUTOR_HANDLER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_QUERY_EXECUTOR_HANDLER, QueryExecutorHandler))
#define IS_QUERY_EXECUTOR_HANDLER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_QUERY_EXECUTOR_HANDLER))
#define QUERY_EXECUTOR_HANDLER_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), TYPE_QUERY_EXECUTOR_HANDLER, QueryExecutorHandlerClass))
#define IS_QUERY_EXECUTOR_HANDLER_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_QUERY_EXECUTOR_HANDLER))
#define QUERY_EXECUTOR_HANDLER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_QUERY_EXECUTOR_HANDLER, QueryExecutorHandlerClass))

gboolean query_executor_handler_execute (QueryExecutorIf *iface, ProtocolQueryResult ** _return, const ProtocolQuery * query, GError **error);

/* QueryExecutor processor */
struct _QueryExecutorProcessor
{
  ThriftDispatchProcessor parent;

  /* protected */
  QueryExecutorHandler *handler;
  GHashTable *process_map;
};
typedef struct _QueryExecutorProcessor QueryExecutorProcessor;

struct _QueryExecutorProcessorClass
{
  ThriftDispatchProcessorClass parent;

  /* protected */
  gboolean (*dispatch_call) (ThriftDispatchProcessor *processor,
                             ThriftProtocol *in,
                             ThriftProtocol *out,
                             gchar *fname,
                             gint32 seqid,
                             GError **error);
};
typedef struct _QueryExecutorProcessorClass QueryExecutorProcessorClass;

GType query_executor_processor_get_type (void);
#define TYPE_QUERY_EXECUTOR_PROCESSOR (query_executor_processor_get_type())
#define QUERY_EXECUTOR_PROCESSOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_QUERY_EXECUTOR_PROCESSOR, QueryExecutorProcessor))
#define IS_QUERY_EXECUTOR_PROCESSOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_QUERY_EXECUTOR_PROCESSOR))
#define QUERY_EXECUTOR_PROCESSOR_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), TYPE_QUERY_EXECUTOR_PROCESSOR, QueryExecutorProcessorClass))
#define IS_QUERY_EXECUTOR_PROCESSOR_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_QUERY_EXECUTOR_PROCESSOR))
#define QUERY_EXECUTOR_PROCESSOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_QUERY_EXECUTOR_PROCESSOR, QueryExecutorProcessorClass))

#endif /* QUERY_EXECUTOR_H */
